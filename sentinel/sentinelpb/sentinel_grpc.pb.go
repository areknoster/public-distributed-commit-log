// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sentinelpb

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SentinelClient is the client API for Sentinel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentinelClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	GetHeadCID(ctx context.Context, in *GetHeadCIDRequest, opts ...grpc.CallOption) (*GetHeadCIDResponse, error)
	GetHeadIPNS(ctx context.Context, in *GetHeadIPNSRequest, opts ...grpc.CallOption) (*GetHeadIPNSResponse, error)
}

type sentinelClient struct {
	cc grpc.ClientConnInterface
}

func NewSentinelClient(cc grpc.ClientConnInterface) SentinelClient {
	return &sentinelClient{cc}
}

func (c *sentinelClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/sentinel.Sentinel/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelClient) GetHeadCID(ctx context.Context, in *GetHeadCIDRequest, opts ...grpc.CallOption) (*GetHeadCIDResponse, error) {
	out := new(GetHeadCIDResponse)
	err := c.cc.Invoke(ctx, "/sentinel.Sentinel/GetHeadCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentinelClient) GetHeadIPNS(ctx context.Context, in *GetHeadIPNSRequest, opts ...grpc.CallOption) (*GetHeadIPNSResponse, error) {
	out := new(GetHeadIPNSResponse)
	err := c.cc.Invoke(ctx, "/sentinel.Sentinel/GetHeadIPNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentinelServer is the server API for Sentinel service.
// All implementations must embed UnimplementedSentinelServer
// for forward compatibility
type SentinelServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	GetHeadCID(context.Context, *GetHeadCIDRequest) (*GetHeadCIDResponse, error)
	GetHeadIPNS(context.Context, *GetHeadIPNSRequest) (*GetHeadIPNSResponse, error)
	mustEmbedUnimplementedSentinelServer()
}

// UnimplementedSentinelServer must be embedded to have forward compatible implementations.
type UnimplementedSentinelServer struct{}

func (UnimplementedSentinelServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

func (UnimplementedSentinelServer) GetHeadCID(context.Context, *GetHeadCIDRequest) (*GetHeadCIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadCID not implemented")
}

func (UnimplementedSentinelServer) GetHeadIPNS(context.Context, *GetHeadIPNSRequest) (*GetHeadIPNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeadIPNS not implemented")
}
func (UnimplementedSentinelServer) mustEmbedUnimplementedSentinelServer() {}

// UnsafeSentinelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentinelServer will
// result in compilation errors.
type UnsafeSentinelServer interface {
	mustEmbedUnimplementedSentinelServer()
}

func RegisterSentinelServer(s grpc.ServiceRegistrar, srv SentinelServer) {
	s.RegisterService(&Sentinel_ServiceDesc, srv)
}

func _Sentinel_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.Sentinel/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sentinel_GetHeadCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadCIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).GetHeadCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.Sentinel/GetHeadCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).GetHeadCID(ctx, req.(*GetHeadCIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sentinel_GetHeadIPNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadIPNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentinelServer).GetHeadIPNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sentinel.Sentinel/GetHeadIPNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentinelServer).GetHeadIPNS(ctx, req.(*GetHeadIPNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sentinel_ServiceDesc is the grpc.ServiceDesc for Sentinel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sentinel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sentinel.Sentinel",
	HandlerType: (*SentinelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Sentinel_Publish_Handler,
		},
		{
			MethodName: "GetHeadCID",
			Handler:    _Sentinel_GetHeadCID_Handler,
		},
		{
			MethodName: "GetHeadIPNS",
			Handler:    _Sentinel_GetHeadIPNS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sentinel.proto",
}
